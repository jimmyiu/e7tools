// import { Gear, HeroAbility, EquipedHero, OptimizationProfile } from '@/models';
// import GearCombinationService from './gear-combination-service';

// export interface IGearOptimizer {
//   store: Gear.GearStore;
//   profile: OptimizationProfile;
//   progressCallback: (x: number) => void;

//   optimize: () => EquipedHero[];
// }

// export class DefaultGearOptimizer implements IGearOptimizer {
//   static COMBINATION_HARD_LIMIT = 5000000;
//   // static COMBINATION_HARD_LIMIT = 10;
//   static OPTIMIZE_RESULT_HARD_LIMIT = 30000;
//   static REPORT_PROGRESS_COUNT = DefaultGearOptimizer.COMBINATION_HARD_LIMIT / 10;

//   constructor(
//     public readonly store: Gear.GearStore,
//     public readonly profile: OptimizationProfile,
//     public readonly progressCallback: (x: number) => void
//   ) {
//     // this.makeUndefinedZero();
//   }

//   optimize(): EquipedHero[] {
//     console.log('optimize::start');
//     console.log('optimize::hero =', this.profile.hero);
//     let start = Date.now();
//     // this.evaluate(result, builder, Object.values(Gear.Type));
//     this.progressCallback(1);
//     const result: EquipedHero[] = this.performOptimize();
//     this.progressCallback(0);
//     console.log('optimize::processing time =', (Date.now() - start) / 1000, 'seconds');
//     return result;
//   }

//   makeUndefinedZero() {
//     console.log('makeUndefinedZero::start');
//     [
//       this.store.weapons,
//       this.store.helmets,
//       this.store.armors,
//       this.store.necklaces,
//       this.store.rings,
//       this.store.boots
//     ].forEach(x => {
//       x.forEach(y => {
//         y.hpp = y.hpp ?? 0;
//         y.hp = y.hp ?? 0;
//         y.defp = y.defp ?? 0;
//         y.def = y.def ?? 0;
//         y.atkp = y.atkp ?? 0;
//         y.atk = y.atk ?? 0;
//         y.cri = y.cri ?? 0;
//         y.cdmg = y.cdmg ?? 0;
//         y.spd = y.spd ?? 0;
//         y.eff = y.eff ?? 0;
//         y.res = y.res ?? 0;
//       });
//     });
//   }

//   minFilter(stat: string) {
//     if ((this.profile.stat as any)[stat]!.min) {
//       return (ability: HeroAbility) => (ability as any)[stat] >= (this.profile.stat as any)[stat].min!;
//     }
//     return (ability: HeroAbility) => true;
//   }
//   maxFilter(stat: string) {
//     if ((this.profile.stat as any)[stat]!.max) {
//       return (ability: HeroAbility) => (ability as any)[stat] <= (this.profile.stat as any)[stat].max!;
//     }
//     return (ability: HeroAbility) => true;
//   }

//   heroAbilityFilter() {
//     // type Filter = (ability: HeroAbility) => boolean;

//     let atkMin = this.minFilter(Gear.Stat.ATK.value);
//     let atkMax = this.maxFilter(Gear.Stat.ATK.value);
//     let spdMin = this.minFilter(Gear.Stat.SPD.value);
//     let criMin = this.minFilter(Gear.Stat.CRI.value);
//     let criMax = this.maxFilter(Gear.Stat.CRI.value);

//     let cdmgMin = this.minFilter(Gear.Stat.CDMG.value);
//     let cdmgMax = this.maxFilter(Gear.Stat.CDMG.value);

//     let ehpMin = this.minFilter('ehp');
//     let damageMin = this.minFilter('damage');

//     // let forcedSet = (hero: EquipedHero) => true;
//     // if (this.profile.criteria.forcedSets.length > 0) {
//     //   forcedSet = (hero: EquipedHero) => {
//     //     for (let i = 0; i < this.profile.criteria.forcedSets.length; i++) {
//     //       if (!hero.combination.sets.includes(this.profile.criteria.forcedSets[i])) {
//     //         return false;
//     //       }
//     //     }
//     //     return true;
//     //   };
//     // }

//     return (hero: EquipedHero) => {
//       return (
//         spdMin(hero) &&
//         criMin(hero) &&
//         criMax(hero) &&
//         atkMin(hero) &&
//         atkMax(hero) &&
//         cdmgMin(hero) &&
//         cdmgMax(hero) &&
//         ehpMin(hero) &&
//         damageMin(hero)
//       );
//     };
//   }

//   heroAbilityFilter2() {
//     // type Filter = (ability: HeroAbility) => boolean;

//     return (ability: HeroAbility) => false;
//   }

//   performOptimizeBak(): EquipedHero[] {
//     let count = 0;
//     const result: EquipedHero[] = [];
//     const builder = new Gear.GearCombinationBuilder2();
//     const filter = this.heroAbilityFilter();
//     for (let i1 = 0; i1 < this.store.weapons.length; i1++) {
//       builder.weapon(this.store.weapons[i1]);

//       for (let i2 = 0; i2 < this.store.helmets.length; i2++) {
//         const builder_1 = builder.clone();
//         builder_1.helmet(this.store.helmets[i2]);

//         for (let i3 = 0; i3 < this.store.armors.length; i3++) {
//           const builder_2 = builder_1.clone();
//           builder_2.armor(this.store.armors[i3]);

//           for (let i4 = 0; i4 < this.store.necklaces.length; i4++) {
//             const builder_3 = builder_2.clone();
//             builder_3.necklace(this.store.necklaces[i4]);

//             for (let i5 = 0; i5 < this.store.rings.length; i5++) {
//               const builder_4 = builder_3.clone();
//               builder_4.ring(this.store.rings[i5]);

//               for (let i6 = 0; i6 < this.store.boots.length; i6++) {
//                 const builder_5 = builder_4.clone();
//                 builder_5.boot(this.store.boots[i6]);

//                 if (++count % DefaultGearOptimizer.REPORT_PROGRESS_COUNT == 0) {
//                   console.log('optimize::count =', count, ', result.length =', result.length);
//                   // this.progressCallback(Math.trunc((100 * count) / DefaultGearOptimizer.COMBINATION_HARD_LIMIT));
//                   this.progressCallback(count);
//                   if (count++ >= DefaultGearOptimizer.COMBINATION_HARD_LIMIT) {
//                     console.log('optimize::hit combination hard limit');
//                     return result;
//                   }
//                 }

//                 let combination = builder_5.build();
//                 // console.log(combination);
//                 const equipedHero = GearCombinationService.apply(combination, this.profile.hero);
//                 // console.log('equipedHero=', equipedHero);
//                 if (filter(equipedHero)) {
//                   result.push(equipedHero);
//                   if (result.length >= DefaultGearOptimizer.OPTIMIZE_RESULT_HARD_LIMIT) {
//                     console.log('optimize::hit combination hard limit, result.length =', result.length);
//                     return result;
//                   }
//                 }
//               }
//             }
//           }
//         }
//       }
//     }
//     return result;
//   }

//   // assertCriteria() {
//   //   if (this._criteria.forcedSets.length > 0) {
//   //     // forcedSet = (hero: EquipedHero) => {
//   //     for (let i = 0; i < this._criteria.forcedSets.length; i++) {
//   //       if (this._criteria.forcedSets[i] == Gear.Set.Speed && this._sets.Speed < 4) {
//   //         return false;
//   //       }
//   //     }
//   //     return true;
//   //   }
//   //   // }
//   // }

//   performOptimize(): EquipedHero[] {
//     let actualCount = 0;
//     let count = 0;
//     const result: EquipedHero[] = [];
//     const builder = new Gear.GearCombinationBuilder();
//     const filter = this.heroAbilityFilter();
//     for (let i1 = 0, n1 = this.store.weapons.length; i1 < n1; i1++) {
//       builder.weapon(this.store.weapons[i1]);
//       for (let i2 = 0, n2 = this.store.helmets.length; i2 < n2; i2++) {
//         builder.helmet(this.store.helmets[i2]);
//         for (let i3 = 0, n3 = this.store.armors.length; i3 < n3; i3++) {
//           builder.armor(this.store.armors[i3]);
//           for (let i4 = 0, n4 = this.store.necklaces.length; i4 < n4; i4++) {
//             builder.necklace(this.store.necklaces[i4]);
//             for (let i5 = 0, n5 = this.store.rings.length; i5 < n5; i5++) {
//               builder.ring(this.store.rings[i5]);
//               for (let i6 = 0, n6 = this.store.boots.length; i6 < n6; i6++) {
//                 builder.boot(this.store.boots[i6]);
//                 // if (++actualCount && !builder.assertCriteria()) {
//                 //   continue;
//                 // }

//                 if (++count % DefaultGearOptimizer.REPORT_PROGRESS_COUNT == 0) {
//                   console.log(
//                     'optimize::actualCount =',
//                     actualCount,
//                     ',count =',
//                     count,
//                     ',result.length =',
//                     result.length
//                   );
//                   // this.progressCallback(Math.trunc((100 * count) / DefaultGearOptimizer.COMBINATION_HARD_LIMIT));
//                   this.progressCallback(count);
//                   if (count >= DefaultGearOptimizer.COMBINATION_HARD_LIMIT) {
//                     console.log('optimize::hit combination hard limit');
//                     return result;
//                   }
//                 }

//                 // let combination = builder.build();
//                 const equipedHero = GearCombinationService.apply(builder.build(), this.profile.hero);
//                 if (filter(equipedHero)) {
//                   result.push(equipedHero);
//                   if (result.length >= DefaultGearOptimizer.OPTIMIZE_RESULT_HARD_LIMIT) {
//                     console.log('optimize::hit combination hard limit, result.length =', result.length);
//                     return result;
//                   }
//                 }
//               }
//             }
//           }
//         }
//       }
//     }
//     return result;
//   }

//   // evaluate(result: Gear.GearCombination[], builder: Gear.GearCombinationBuilder, types: Gear.Type[]) {
//   //   if (types.length == 0) {
//   //     let combination = builder.build();

//   //     if (result.length >= GearOptimizer.OPTIMIZE_RESULT_HARD_LIMIT) {
//   //       console.log('optimize::hit combination hard limit, result.length =', result.length);
//   //       console.log('processing time =', (Date.now() - time) / 1000, 'seconds');
//   //       return result;
//   //     }
//   //   } else {
//   //     const gears: Gear.Gear[] = this.store.getGearsByType(types[0]);
//   //     for (let i = 0; i < gears.length; i++) {
//   //       builder.set(types[0], gears[i]);
//   //       this.evaluate(result, builder, types.slice(1));
//   //     }
//   //   }
//   // }
// }

// export class GearCombinationBuilder2 {
//   private _weapon = Gear.Gear.NONE;
//   private _helmet = Gear.Gear.NONE;
//   private _armor = Gear.Gear.NONE;
//   private _necklace = Gear.Gear.NONE;
//   private _ring = Gear.Gear.NONE;
//   private _boot = Gear.Gear.NONE;
//   private _ability: GearAbility = getZeroAbility();
//   private _sets = {
//     Speed: 0,
//     Critical: 0,
//     Hit: 0,
//     //
//     Destruction: 0,
//     LifeSteal: 0,
//     Counter: 0,
//     Resist: 0,
//     //
//     Health: 0,
//     Defense: 0,
//     Attack: 0,
//     //
//     Immunity: 0,
//     Unity: 0,
//     Rage: 0,
//     //
//     Revenge: 0,
//     Injury: 0,
//     Penetration: 0
//   };
//   constructor() {
//     // Object.values(Gear.Set).forEach(x => (this._sets[x] = 0));
//   }
//   weapon(weapon: Gear.Gear) {
//     this.addAbility(weapon);
//     // this._sets[weapon.set!]++;
//     this.updateSets(weapon.set);
//     this._weapon = weapon;
//   }
//   helmet(helmet: Gear.Gear) {
//     this.addAbility(helmet);
//     // this._sets[helmet.set!]++;
//     this.updateSets(helmet.set);
//     this._helmet = helmet;
//   }
//   armor(armor: Gear.Gear) {
//     this.addAbility(armor);
//     // this._sets[armor.set!]++;
//     this.updateSets(armor.set);
//     this._armor = armor;
//   }
//   necklace(necklace: Gear.Gear) {
//     this.addAbility(necklace);
//     // this._sets[necklace.set!]++;
//     this.updateSets(necklace.set);
//     this._necklace = necklace;
//   }
//   ring(ring: Gear.Gear) {
//     this.addAbility(ring);
//     // this._sets[ring.set!]++;
//     this.updateSets(ring.set);
//     this._ring = ring;
//   }
//   boot(boot: Gear.Gear) {
//     this.addAbility(boot);
//     // this._sets[boot.set!]++;
//     this.updateSets(boot.set);
//     this._boot = boot;
//   }

//   build() {
//     return new GearCombination(
//       this._weapon,
//       this._helmet,
//       this._armor,
//       this._necklace,
//       this._ring,
//       this._boot,
//       this._ability,
//       this._sets
//     );
//   }
//   clone() {
//     const clone = new GearCombinationBuilder2();
//     clone._weapon = this._weapon;
//     clone._helmet = this._helmet;
//     clone._armor = this._armor;
//     clone._necklace = this._necklace;
//     clone._ring = this._ring;
//     clone._boot = this._boot;
//     clone._ability = Object.assign({}, this._ability);
//     clone._sets = Object.assign({}, this._sets);
//     return clone;
//   }
//   private updateSets(set?: Gear.Set) {
//     if (set) {
//       if (set == Gear.Set.Speed) {
//         this._sets.Speed++;
//       } else if (set == Gear.Set.Critical) {
//         this._sets.Critical++;
//       } else if (set == Gear.Set.Hit) {
//         this._sets.Hit++;
//       } else if (set == Gear.Set.Destruction) {
//         this._sets.Destruction++;
//       } else if (set == Gear.Set.LifeSteal) {
//         this._sets.LifeSteal++;
//       } else if (set == Gear.Set.Counter) {
//         this._sets.Counter++;
//       } else if (set == Gear.Set.Resist) {
//         this._sets.Resist++;
//       } else if (set == Gear.Set.Health) {
//         this._sets.Health++;
//       } else if (set == Gear.Set.Defense) {
//         this._sets.Defense++;
//       } else if (set == Gear.Set.Attack) {
//         this._sets.Attack++;
//       } else if (set == Gear.Set.Immunity) {
//         this._sets.Immunity++;
//       } else if (set == Gear.Set.Unity) {
//         this._sets.Unity++;
//       } else if (set == Gear.Set.Rage) {
//         this._sets.Rage++;
//       } else if (set == Gear.Set.Revenge) {
//         this._sets.Revenge++;
//       } else if (set == Gear.Set.Injury) {
//         this._sets.Injury++;
//       } else if (set == Gear.Set.Penetration) {
//         this._sets.Penetration++;
//       }
//     }
//   }
//   private addAbility(plus: Gear.GearAbility) {
//     this._ability.hpp += plus.hpp ?? 0;
//     this._ability.hp += plus.hp ?? 0;
//     this._ability.defp += plus.defp ?? 0;
//     this._ability.def += plus.def ?? 0;
//     this._ability.atkp += plus.atkp ?? 0;
//     this._ability.atk += plus.atk ?? 0;
//     this._ability.cri += plus.cri ?? 0;
//     this._ability.cdmg += plus.cdmg ?? 0;
//     this._ability.spd += plus.spd ?? 0;
//     this._ability.eff += plus.eff ?? 0;
//     this._ability.res += plus.res ?? 0;
//   }
// }

// private applyDeltaAbility(plus: any, minus: any) {
//   this._ability.hpp = this._ability.hpp + plus.hpp - minus.hpp;
//   this._ability.hp = this._ability.hp + plus.hp - minus.hp;
//   this._ability.defp = this._ability.defp + plus.defp - minus.defp;
//   this._ability.def += plus.def - minus.def;
//   this._ability.atkp += plus.atkp - minus.atkp;
//   this._ability.atk += plus.atk - minus.atk;
//   this._ability.cri += plus.cri - minus.cri;
//   this._ability.cdmg += plus.cdmg - minus.cdmg;
//   this._ability.spd += plus.spd - minus.spd;
//   this._ability.eff += plus.eff - minus.eff;
//   this._ability.res += plus.res - minus.res;
// }
